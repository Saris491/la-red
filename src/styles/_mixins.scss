@import './animations';
@import './config';
@import './extends';

////////////////////////////
////////////////////////////
// Layout
@mixin flex($justify: flex-start, $align: center, $direction: row, $wrap: nowrap) {
  align-items: $align;
  display: flex;
  flex-flow: $direction $wrap;
  justify-content: $justify;
}

@mixin scrollSnap($snap-align: start) {
  max-height: 100vh;
  overflow-y: scroll;
  scroll-snap-type: y mandatory;

  section {
    scroll-snap-align: $snap-align;
  }
}

////////////////////////////
////////////////////////////
// Buttons

@mixin iconButton($color) {
  border: 2px solid transparent;
  border-radius: 50%;
  color: lighten($color, 30%);
  font-size: 22px;
  font-weight: $light;
  height: 50px;
  width: 50px;

  @extend %flex-center;
  @include spinningBorder($color);
  @include respond-down($sm) {
    height: 35px;
    width: 35px;
  }
}

@mixin backButton() {
  background-color: transparent;
  border: 1px solid $grey-8;
  border-radius: 50%;
  color: $grey-8;
  cursor: pointer;
  font-size: 15px;
  height: 35px;
  opacity: 1;
  transition: all .35s cubic-bezier(0.165, 0.84, 0.44, 1);
  width: 35px;

  @extend %flex-center;

  &:hover {
    border: 1px solid $white;
    color: $white;

    svg {
      transform: translateX(-2px);
    }
  }

  &:focus {
    background: none;
    outline: 0;
  }

  svg {
    transition: transform .35s ease-in-out;
  }
}

@mixin scrollDownbutton() {
  transition:
    all .3s ease-in-out,
    transform .3s cubic-bezier(0.6, -0.28, 0.735, 0.045);

  &:hover {
    cursor: pointer;
    transform: translateY(10px);
  }
}

@mixin outlineIconButton() {
  background-color: transparent;
  border: 1px solid $grey-8;
  border-radius: 50%;
  color: $grey-8;
  cursor: pointer;
  font-size: 15px;
  height: 35px;
  opacity: 1;
  transition: all .35s cubic-bezier(0.165, 0.84, 0.44, 1);
  width: 35px;

  @extend %flex-center;

  &:hover {
    border: 1px solid $white;
    color: $white;

    svg {
      transform: scale(1.05);
    }
  }

  &:focus {
    background: none;
    outline: 0;
  }

  svg {
    transition: transform .35s ease-in-out;
  }

  &.disabled {
    border: 1px solid $grey-3;
    color: $grey-3;
    cursor: not-allowed;
  }
}

@mixin outlineIconCTA() {
  box-sizing: border-box;
  border: 1px solid $grey-5;
  border-radius: 25px;
  display: flex;
  margin: 1em auto;
  padding: .75em 2.5em;
  transition: border .25s ease-in-out;
  width: fit-content;

  span, svg {
    color: $grey-5;
    transition: color .25s ease-in-out;
  }

  svg {
    font-size: 16px;
    margin: 0 10px 0 0;
  }

  &:hover {
    border: 1px solid $white;
    cursor: pointer;

    span, svg {
      color: $white;
    }
  }

  &:focus {
    background-color: $grey-1;
  }
}

// Overlays

@mixin image-overlay($relative: true) {
  @if($relative == true) {
    position: relative;
  }

  &::before {
    background-color: rgba(0, 0, 0, .5);
    bottom: 0;
    content: '';
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    z-index: $z-base;
  }
}

@mixin image-gradient-overlay() {
  position: relative;

  &::before {
    background: linear-gradient(to bottom,
    rgba(0, 0, 0, .2), rgba(251, 251, 251, .2) 100%);
    bottom: 0;
    content: '';
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    z-index: $z-0;
  }

  &::after {
    background: linear-gradient(to bottom,
    rgba(243, 243, 243, 0), rgba(243, 243, 243, 1) 85%);
    bottom: -16px;
    content: '';
    height: 100px;
    left: 0;
    position: absolute;
    right: 0;
    width: 100%;
  }
}

////////////////////////////
////////////////////////////
// Calculations


//  Rem
$baseFontSize: 10; // Based on HTML reset { font-size: 62.5%; }

@function parseInt($n) {
  @return calc($n / ($n * 0 + 1px));
}

@mixin rem($property, $values) {
  $px: ();
  $rem: ();
  $root: $baseFontSize;

  @each $value in $values {
    @if $value == 0 or $value == auto {
      $px: append($px, $value);
      $rem: append($rem, $value);
    } @else if type-of($value) == number {
      $unit: unit($value);
      $val: parseInt($value);

      @if $unit == 'px' {
        $px: append($px, $value);
        $rem: append($rem, (calc($val / $root) + rem));
      }

      @if $unit == 'rem' {
        $px: append($px, ($val * $root + px));
        $rem: append($rem, $value);
      }
    } @else {
      $px: append($px, $value);
      $rem: append($rem, $value);
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}

// Media queries
@mixin respond-up($size) {
  @if $size == xs {
    @media only screen and (min-width: $size-xs) {
      @content;
    }
  } @else if $size == sm {
    @media only screen and (min-width: $sm) {
      @content;
    }
  } @else if $size == md {
    @media only screen and (min-width: $md) {
      @content;
    }
  } @else if $size == bootlg {
    @media only screen and (min-width: $size-boot-lg) {
      @content;
    }
  } @else if $size == lg {
    @media only screen and (min-width: $lg) {
      @content;
    }
  } @else if $size == xl {
    @media only screen and (min-width: $xl) {
      @content;
    }
  } @else {
    @media only screen and (min-width: $size) {
      @content;
    }
  }
}

@mixin respond-down($size) {
  @if $size == xs {
    @media only screen and (max-width: $size-xs) {
      @content;
    }
  } @else if $size == sm {
    @media only screen and (max-width: ($sm - 1px)) {
      @content;
    }
  } @else if $size == md {
    @media only screen and (max-width: ($md - 1px)) {
      @content;
    }
  } @else if $size == bootlg {
    @media only screen and (max-width: ($size-boot-lg - 1px)) {
      @content;
    }
  } @else if $size == lg {
    @media only screen and (max-width: ($lg - 1px)) {
      @content;
    }
  } @else if $size == xl {
    @media only screen and (max-width: ($xl - 1px)) {
      @content;
    }
  } @else {
    @media only screen and (max-width: $size) {
      @content;
    }
  }
}
